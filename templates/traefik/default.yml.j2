tls:
{% if docker_traefik_enable_stored_certs | bool %}
  stores:
    default:
      defaultCertificate:
        certFile: /cert/cert.crt
        keyFile: /cert/cert.key
{% endif %}
  options:
    default:
      minVersion: VersionTLS12
      cipherSuites:
        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
        - TLS_AES_128_GCM_SHA256
        - TLS_AES_256_GCM_SHA384
        - TLS_CHACHA20_POLY1305_SHA256
      curvePreferences:
        - CurveP521
        - CurveP384
      sniStrict: true

http:
  middlewares:
    set_basicHeaders:
      headers:
        forceSTSHeader: true
        stsPreload: true
        stsSeconds: 31536000
    set_XforwardHeader:
      headers:
        customResponseHeaders:
          X-Forwarded-Proto: "https"
        customRequestHeaders:
          X-Forwarded-Proto: "https"
        hostsProxyHeaders:
          - "X-Forwarded-Host"
        sslProxyHeaders:
          X-Forwarded-Proto: https
    deny_allReferrerPolicy:
      headers:
        frameDeny: true
        referrerPolicy: "{{ docker_traefik_secHeaders_referrer_policy | default('same-origin') }}"
    allow_referrerSameOrigin:
      headers:
        customFrameOptionsValue: 'sameorigin'
    singleSecHeader:
      headers:
        browserXssFilter: true
        contentTypeNosniff: true
        frameDeny: {{ (docker_traefik_secHeaders_custom_frame_deny | default('true')) | bool }}
        customFrameOptionsValue: 'sameorigin'
        referrerPolicy: "{{ docker_traefik_secHeaders_referrer_policy | default('same-origin') }}"
        forceSTSHeader: true
        stsIncludeSubdomains: true
        stsPreload: true
        stsSeconds: 31536000
        customResponseHeaders:
          X-Forwarded-Proto: "https"
          X-Robots-Tag: "none,noarchive,nosnippet,notranslate,noimageindex"
        customRequestHeaders:
          X-Forwarded-Proto: "https"
        hostsProxyHeaders:
          - "X-Forwarded-Host"
        sslProxyHeaders:
          X-Forwarded-Proto: https
    redirect_www:
      redirectRegex:
        regex: "^https?://www\\.(.+)"
        replacement: "https://${1}"
        permanent: true
    errors:
      errors:
        status:
          - "503"
          - "502"
          - "404"
        service: errorService
        query: "/{status}.html"
    deny_pageIndexHeader:
      headers:
        customResponseHeaders:
          X-Robots-Tag: "noindex,nofollow,nosnippet,noarchive,noimageindex,nocache"
    compression:
      compress: { }
    default-ipwhitelist:
      ipwhitelist:
        sourceRange:
{% for ip in ipwhitelist %}
          - "{{ ip }}"
{% endfor %}
