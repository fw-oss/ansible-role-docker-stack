global:
  checkNewVersion: true
  sendAnonymousUsage: false

serversTransport:
  insecureSkipVerify: true

api:
  dashboard: {{ docker_traefik_dashboard_enable | bool }}
{% if docker_traefik_dashboard_enable and not docker_traefik_https_enabled | bool %}
  insecure: true
{% endif %}

entryPoints:
  {{ docker_traefik_entrypoint_name_http }}:
    address: :80
{% if docker_traefik_https_enabled | bool  or docker_traefik_enable_compression | bool %}
    http:
{% if docker_traefik_https_enabled | bool %}
      redirections:
        entryPoint:
          to: {{ docker_traefik_entrypoint_name_https }}
          scheme: https
{% endif %}
{% if docker_traefik_enable_compression | bool %}
      middlewares:
        - compression@file
{% endif %}
{% endif %}

{% if docker_traefik_https_enabled | bool %}
  {{ docker_traefik_entrypoint_name_https }}:
    address: :443
{% if docker_traefik_trusted_proxies | length %}
    forwardedHeaders:
      trustedIPs:
{% for trusted_proxy in docker_traefik_trusted_proxies %}
        - {{ trusted_proxy }}
{% endfor %}
{% endif %}
    http:
{% if docker_traefik_enable_acme | bool %}
      tls:
        certResolver: leresolver
{% if docker_traefik_wildcard_list | length %}
        domains:
{% for wildcard in docker_traefik_wildcard_list %}
          - main: "{{ wildcard }}"
            sans:
              - "*.{{ wildcard }}"
{% endfor %}
{% endif %}
{% if docker_traefik_wildcard is defined and docker_traefik_wildcard | length %}
        domains:
          - main: "{{ docker_traefik_wildcard }}"
            sans:
              - "*.{{ docker_traefik_wildcard }}"
{% endif %}
{% elif docker_traefik_enable_stored_certs | bool %}
      tls: true
{% endif %}
      middlewares:
        - set_basicHeaders@file
{% if docker_traefik_enable_headers|bool %}
        - set_XforwardHeader@file
        - deny_allReferrerPolicy@file
{% endif %}
{% if docker_traefik_enable_noindex|bool %}
        - deny_pageIndexHeader@file
{% endif %}
{% if docker_traefik_enable_compression | bool %}
        - compression@file
{% endif %}
{% endif %}

{% for entrypoint in docker_traefik_additional_entrypoints %}
  {{ entrypoint.name }}:
  address: :{{ entrypoint.port }}/{{ protocol | default('tcp') }}
{% if entrypoint.http | default('false') | bool %}
    http:
{% if entrypoint.ssl | default('false') | bool %}
{% if docker_traefik_enable_acme | bool %}
      tls:
        certResolver: leresolver
{% elif docker_traefik_enable_stored_certs | bool %}
      tls: true
{% endif %}
{% endif %}
      middlewares:
        -  set_basicHeaders@file
{% if entrypoint.headers|bool %}
        - set_XforwardHeader@file
        - deny_allReferrerPolicy@file
{% endif %}
{% if entrypoint.noindex|bool %}
        - deny_pageIndexHeader@file
{% endif %}
{% if entrypoint.compression | bool %}
        - compression@file
{% endif %}
{% endif %}
{% endfor %}

{% if docker_traefik_metrics | bool %}
  metrics:
    address::{{ docker_traefik_metrics_port | default('8082') }}

{% endif %}
  ping:
    address: :8083

providers:
  docker:
    endpoint: "unix:///var/run/docker.sock"
    exposedByDefault: false
    network: {{ docker_traefik_network_name }}
  file:
    directory: /config/dynamic
    watch: true

{% if docker_traefik_enable_acme | bool %}
certificatesResolvers:
  leresolver:
    acme:
      email: {{ docker_traefik_acme_mail }}
      storage: acme.json
{% if docker_traefik_dns_challenge | bool %}
      dnsChallenge:
        provider: {{ docker_traefik_dns_provider }}
        resolvers:
{% for resolver in docker_traefik_dns_resolvers %}
          - "{{ resolver }}"
{% endfor %}
{% if docker_traefik_dns_delay is defined %}
{% if docker_traefik_version.replace('v', '') is version('3.3', '<') %}
        delayBeforeCheck: "{{ docker_traefik_dns_delay }}"
{% else %}
        propagation:
          delayBeforeChecks: "{{ docker_traefik_dns_delay }}"
{% endif %}
{% endif %}
{% else %}
      httpChallenge:
        entryPoint: {{ docker_traefik_entrypoint_name_http }}
{% endif %}
{% endif %}

log: { }

accessLog: { }

{% if docker_traefik_metrics | bool %}
metrics:
  prometheus:
    entryPoint: metrics
    # addEntryPointsLabels: true
    # addRoutersLabels: true
    # addServicesLabels: true
{% endif %}

ping:
  entryPoint: "ping"
